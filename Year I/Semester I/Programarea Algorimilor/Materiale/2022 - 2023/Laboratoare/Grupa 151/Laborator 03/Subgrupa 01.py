# -*- coding: utf-8 -*-
"""LabPA_3_Sg1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hsFtHAM7ucS4So0_SaYAZUGfUPHSs9wo

Exercitiul 1
"""

# 1a
print([x for x in range(10) if x&1==1])

# 1b

print([chr(ord('a') + x) for x in range(26)])

# 1c
def gen_lista(n):
    L = [i if i & 1 == 1 else -i for i in range(1, n + 1)]
    return L
print(gen_lista(7))

# 1d

def impar_numbers(list_number):
    impar_list = [number for number in list_number if number%2 != 0]
    return impar_list

x = impar_numbers([1,2,3,5,66,3,2,6,2334,63,4])
print(x)

# 1f

def nr_parity_same_as_pos(list):
    return [x for i, x in enumerate(list) if ((x % 2) == (i % 2))]

print(nr_parity_same_as_pos([2, 4, 1, 7, 5, 1, 8, 10]))

# 1e

def a(lista):
    new_list = [lista[i] for i in range(0, len(lista)) if i % 2==1]
    return new_list

print(a([2, 4, 1, 7, 5, 1, 8, 10]))

# 1g

def perechi(L):
    return [(L[x],L[x+1]) for x in range(len(L) - 1)]

print(perechi([1,2,3,4]))

# 1 h)

def lista_n_liste(n):
    L = [[f"{i} x {j} = {i * j}" for j in range(1, n + 1)] for i in range(1, n + 1)]
    return L
print(lista_n_liste(6))

# 1 i)
def generated_list(n):
    el_awoken = [[i] * i for i in range(n)]
    return el_awoken

value = generated_list(9)
print(value)

a = [2, 4, 1, 7, 5, 1, 8, 10, 17, 31, 25, 102, 111]

a.sort(key = lambda x : str(x))

print(a)

set('abca')

"""Exercitiul 2"""

# 2a
a = [2, 4, 1, 7, 5, 1, 8, 10, 17, 31, 25, 102, 111]

a.sort(key = lambda x : str(x))

print(a)

# 2b
a = [2, 4, 1, 7, 5, 1, 8, 10, 17, 31, 25, 102, 111]
a.sort(key = lambda x : str(x)[::-1])
print(a)

# 2c

def sort_length(nrs):
    return sorted(nrs, key = lambda x : len(str(x).strip('-')))

print(sort_length([1111, -22222, 333333]))


#2d

def sort_unique_digits(nrs):
    return sorted(nrs, key = lambda x : len(set(str(x).strip('-'))))

print(sort_unique_digits([111111111, 4113, -987765, 1234]))

"""Exercitiul 3"""

from string import punctuation
with open('propo.txt') as f:
    data = f.readline()
    sentence = data.translate({ord(x) : ord(' ') for x in punctuation})
    counter = dict()
    for word in sentence.split():
        counter[word] = counter.get(word, 0) + 1
    rev_counter = sorted([(b, a) for a, b in counter.items()])
    print(rev_counter)
    min_word = rev_counter[0][1]
    max_word = ''
    for x in range(len(rev_counter) - 1, -1, -1):
        if rev_counter[x][0] != rev_counter[-1][0]:
            break
        max_word = rev_counter[x][1]
    print(f"Least common word = {min_word}\nMost common word  = {max_word}")

"""Exercitiul 4"""

#4
S1="Marcel e Marcel"
S2="El nu e Marcel"
Dict1={x:0 for x in S1.split()}
Dict2={x:0 for x in S2.split()}

for x in S1.split():
    Dict1[x]+=1
for x in S2.split():
    Dict2[x]+=1

# alta metoda
d1, d2 = dict(), dict()
for x in S1.split():
    d1[x] = d1.get(x, 0) + 1
for x in S2.split():
    d2[x] = d2.get(x, 0) + 1

for x in Dict2.keys():
    if x in Dict1.keys():
        Dict1[x]+=Dict2[x]
    else:
        Dict1[x]=Dict2[x]

print(Dict1)

"""Exercitiul 5"""

n = int(input("n = "))
matrice = [[(i - 1) * n + j for j in range(1, n + 1)] for i in range(1, n + 1)]
print(matrice)

for i in range(0, (n + 1) // 2 - 1):
    for j in range(i, n - i - 1):
        print(matrice[i][j], end = ' ')
    for j in range(i + 1, n - i - 1):
        print(matrice[j][n - i - 1], end = "  ")
    for j in range(n - i - 2, i - 1, -1):
        print(matrice[n - i - 1][j], end = "  ")
    for j in range(n - i - 2, i, -1):
        print(matrice[i][j], end = "  ")

# 5)
# a)
n = int(input("n = "))
matrice = [[(i - 1) * n + j for j in range(1, n + 1)] for i in range(1, n + 1)]
print(matrice)
# b)
for i in range(0, (n + 1) // 2):
    for j in range(i, n - i):
        print(matrice[i][j], end = ' ')
    for j in range(i + 1, n - i):
        print(matrice[j][n - i - 1], end = " ")
    for j in range(n - i - 2, i - 1, -1):
        print(matrice[n - i - 1][j], end = " ")
    for j in range(n - i - 2, i, -1):
        print(matrice[j][i], end = " ")



"""Bonus: Graf, DFS + BFS (tema)"""

f = open("graf.txt","r")
n=int((f.readline()).rstrip())
#print(n)
s=(f.readlines())
for x in range(len(s)):
    s[x] = s[x].rstrip()
#print(s)
graf = {x:[] for x in range(1,n+1)}
for x in range(len(s)):
    u=s[x].split()
    graf[int(u[0])].append(int(u[1]))
    graf[int(u[1])].append(int(u[0]))
print(graf)

viz = [0] * (n + 1)

def dfs(x):
    global viz
    viz[x] = 1
    print(x, end = " ")
    for y in graf[x]:
        if not viz[x]:
            dfs(y)

for i in range(1, n + 1):
    if not viz[i]:
        dfs(i)

